<?xml version="1.0" encoding="UTF-8"?>
<system>
    <!-- This is a 4KB memory region at the physical address of 0x30890000,
    which is where the UART device registers are mapped to. -->
    <memory_region
            name="uart"
            size="0x10_000"
            phys_addr="0x30890000"/>
    <!-- In the SDDF's design-documentation, `shared_dma` is referred to as the
    "Data Region". `shared_dma` is an array of I/O buffers that will be used to
    pass/transport data from `serial_client` to `serial_driver` and vice-versa.
    The `shared_dma` memory region MUST be mapped at the exact same virtual
    memory address in all the PDs that use the `shared_dma`. If they aren't
    mapped to the same address, the SDDF's ring buffer mechanism of transporting
    data across PDs will NOT work. This is because the SDDF's ring buffer
    mechanism passes the virtual address of a `shared_dma` buffer from PD to PD,
    which enables the SDDF's transport mechanism to be zero-copy. Theoretically,
    the requirement to map the `shared_dma` to the same virtual address in
    various PDs could be alleviated if there existed a mechanism to translate
    virtual addresses across PDs (VSpaces); however, such a mechanism does NOT
    currently exist. -->
    <memory_region
            name="shared_dma"
            size="0x200_000"
            page_size="0x200_000"/>
    <!-- This is a 2MB memory region with a 2MB page size. An explanation of the
    purpose of this memory region is provided in `serial_client.c`. The SDDF
    does not require this memory region to be mapped to a specific virtual
    address. -->
    <memory_region
            name="tx_avail_ring_buf"
            size="0x200_000"
            page_size="0x200_000"/>
    <!-- This is a 2MB memory region with a 2MB page size. An explanation of the
    purpose of this memory region is provided in `serial_client.c`. The SDDF
    does not require this memory region to be mapped to a specific virtual
    address. -->
    <memory_region
            name="tx_used_ring_buf"
            size="0x200_000"
            page_size="0x200_000"/>
    <!-- This is a 2MB memory region with a 2MB page size. An explanation of the
    purpose of this memory region is provided in `serial_client.c`. The SDDF
    does not require this memory region to be mapped to a specific virtual
    address. -->
    <memory_region
            name="rx_avail_ring_buf"
            size="0x200_000"
            page_size="0x200_000"/>
    <!-- This is a 2MB memory region with a 2MB page size. An explanation of the
    purpose of this memory region is provided in `serial_client.c`. The SDDF
    does not require this memory region to be mapped to a specific virtual
    address. -->
    <memory_region
            name="rx_used_ring_buf"
            size="0x200_000"
            page_size="0x200_000"/>
    <!-- The `serial_driver` PD must have a higher priority than the
    `serial_client` PD so that it doesn't get preempted by `serial_client` when
    it is busy writing to the UART device. -->
    <protection_domain
            name="serial_driver"
            priority="101"
            pp="true">
        <program_image path="serial_driver.elf"/>
        <!-- We map our physical memory to the virtual address at 0x5_000_000 -->
        <map
                mr="uart"
                vaddr="0x5_000_000"
                perms="rw"
                cached="false"
                setvar_vaddr="uart_base_vaddr"/>
        <!-- The UART IRQs for the imx8mm according to its DTS files are
        actually 26 to 29; however, since seL4 uses the first 32 interrupts for
        itself, all the hardware interrupt values are offset by 32. As such, the
        imx8mm's UART interrupts are now 58 - 61. -->
<!--        <irq irq="58" id="1" />-->
        <irq irq="59" id="2" />
<!--        <irq irq="60" id="3" />-->
<!--        <irq irq="61" id="4" />-->
        <!-- As per our earlier comment on `shared_dma`, `shared_dma` is always
        mapped to the same virtual address of 0x2_400_000 for ALL PDs (which is
        a requirement and assumption of the SDDF's transport mechanism). -->
        <map
                mr="shared_dma"
                vaddr="0x2_400_000"
                perms="rw"
                cached="true"
                setvar_vaddr="shared_dma" />
        <!-- Unlike `shared_dma`, there is no limitation to where this memory
        region is mapped to in this PD's virtual address space. -->
        <map
                mr="tx_avail_ring_buf"
                vaddr="0x7_000_000"
                perms="rw"
                cached="true"
                setvar_vaddr="tx_avail_ring_buf"/>
        <!-- Unlike `shared_dma`, there is no limitation to where this memory
        region is mapped to in this PD's virtual address space. -->
        <map
                mr="tx_used_ring_buf"
                vaddr="0x7_200_000"
                perms="rw"
                cached="true"
                setvar_vaddr="tx_used_ring_buf"/>
        <!-- Unlike `shared_dma`, there is no limitation to where this memory
        region is mapped to in this PD's virtual address space. -->
        <map
                mr="rx_avail_ring_buf"
                vaddr="0x7_400_000"
                perms="rw"
                cached="true"
                setvar_vaddr="rx_avail_ring_buf"/>
        <!-- Unlike `shared_dma`, there is no limitation to where this memory
        region is mapped to in this PD's virtual address space. -->
        <map
                mr="rx_used_ring_buf"
                vaddr="0x7_600_000"
                perms="rw"
                cached="true"
                setvar_vaddr="rx_used_ring_buf"/>
    </protection_domain>
    <!-- The `serial_client` PD must have a lower priority than the
    `serial_driver` PD so that it doesn't preempt `serial_client` when it is
    busy writing to the UART device. -->
    <protection_domain
            name="serial_client"
            priority="100"
            pp="true">
        <program_image path="serial_client.elf"/>
        <!-- As per our earlier comment on `shared_dma`, `shared_dma` is always
        mapped to the same virtual address of 0x2_400_000 for ALL PDs (which is
        a requirement and assumption of the SDDF's transport mechanism). -->
        <map
                mr="shared_dma"
                vaddr="0x2_400_000"
                perms="rw"
                cached="true"
                setvar_vaddr="shared_dma" />
        <!-- Unlike `shared_dma`, there is no limitation to where this memory
        region is mapped to in this PD's virtual address space. -->
        <map
                mr="tx_avail_ring_buf"
                vaddr="0x6_000_000"
                perms="rw"
                cached="true"
                setvar_vaddr="tx_avail_ring_buf"/>
        <!-- Unlike `shared_dma`, there is no limitation to where this memory
        region is mapped to in this PD's virtual address space. -->
        <map
                mr="tx_used_ring_buf"
                vaddr="0x6_200_000"
                perms="rw"
                cached="true"
                setvar_vaddr="tx_used_ring_buf"/>
        <!-- Unlike `shared_dma`, there is no limitation to where this memory
        region is mapped to in this PD's virtual address space. -->
        <map
                mr="rx_avail_ring_buf"
                vaddr="0x6_400_000"
                perms="rw"
                cached="true"
                setvar_vaddr="rx_avail_ring_buf"/>
        <!-- Unlike `shared_dma`, there is no limitation to where this memory
        region is mapped to in this PD's virtual address space. -->
        <map
                mr="rx_used_ring_buf"
                vaddr="0x6_600_000"
                perms="rw"
                cached="true"
                setvar_vaddr="rx_used_ring_buf"/>
    </protection_domain>
    <!-- Channel between `serial_client` and `serial_driver` for printf() calls
    by `serial_client`. -->
    <channel>
        <end pd="serial_client" id="3" />
        <end pd="serial_driver" id="4" />
    </channel>
    <!-- Channel between `serial_client` and `serial_driver` for getchar() calls
    by `serial_client`. -->
    <channel>
        <end pd="serial_client" id="5" />
        <end pd="serial_driver" id="6" />
    </channel>
</system>

